import requests
from aiogram import F
from aiogram import types, Router
from states.states import LangState
from data.config import BACKEND_URL
from states.states import SearchByType
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from keyboards.default.main import main_button, language, product_type
from utils.misc.assistants import get_user_lang, send_error_notify_, network_error_message

router = Router()

answer_t = {
    'uz': "Kerakli mahsulot nomini yuboring\nyoki berilgan tugmalar orqali kerakli amalni bajaring.",
    'ru': "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–µ–ª–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞\n–∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫."
}


@router.message(CommandStart())
async def bot_start(message: types.Message, state: FSMContext):
    lang = await get_user_lang(message=message, state=state)
    if lang:
        await message.answer(
            text=answer_t.get(lang),
            reply_markup=await main_button(lang=lang)
        )
        return
    await message.answer(
        text="Assalomu alaykum\n"
             "Botga xush kelibsiz\n\n"
             "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ\n"
             "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç"
    )
    await message.answer(
        text="Foydalanish uchun tilni tanlang.\n"
             "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.",
        reply_markup=await language()
    )

    response = requests.post(
        url=f"{BACKEND_URL}/create/",
        json={
            "full_name": f"{message.from_user.full_name}",
            "telegram_id": message.from_user.id
        }
    )

    if response.status_code != 201:
        await send_error_notify_(
            status_code=response.status_code,
            line=40, filename='start.py',
        )
        await network_error_message(message=message)
        return

    await state.set_state(LangState.lang)


@router.message(LangState.lang, F.text.in_(["Uzb", "Rus"]))
async def user_language(message: types.Message, state: FSMContext):
    if message.text == "Uzb":
        lang = 'uz'
    else:
        lang = 'ru'

    response = requests.post(
        url=f"{BACKEND_URL}/create/",
        json={
            "full_name": f"{message.from_user.full_name}",
            "telegram_id": message.from_user.id,
            "language": lang
        }
    )
    if response.status_code != 201:
        await send_error_notify_(
            status_code=response.status_code,
            line=66, filename='start.py'
        )
        await network_error_message(message=message)
        await state.set_state(LangState.lang)
        return

    await message.answer(
        text=answer_t.get(lang),
        reply_markup=await main_button(lang=lang)
    )
    await state.set_state(None)


@router.message(LangState.lang)
async def user_language(message: types.Message, state: FSMContext):
    await message.delete()
    await message.answer(
        text="Foydalanish uchun tilni tanlang.\n"
             "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.",
        reply_markup=await language()
    )
    await state.set_state(LangState.lang)


@router.message(F.text.in_(["üè† Asosiy sahifa", "üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"]))
async def main_page(message: types.Message, state: FSMContext):
    lang = await get_user_lang(message=message, state=state)
    await state.set_state(None)
    if not lang:
        return

    await message.answer(
        text=answer_t.get(lang),
        reply_markup=await main_button(lang=lang)
    )


@router.message(F.text.in_(["Qidiruv üîç", "–ü–æ–∏—Å–∫ üîç"]))
async def search_by_type_button(message: types.Message, state: FSMContext):
    lang = await get_user_lang(message=message, state=state)
    if not lang:
        return

    await message.answer(
        text={
            'uz': "Sizni qiziqtirgan mahsulot turini tanlang\n"
                  "va turdagi mahsulotlar haqida ko'proq malumot olishingiz mumkin.",
            'ru': "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞\n"
                  "–∏ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —Ç–∏–ø–∞—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤."
        }.get(lang),
        reply_markup=await product_type(lang)
    )
    await state.set_state(SearchByType.p_type)
